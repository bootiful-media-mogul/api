type Setting {
    name: String
    value: String
    valid: Boolean
}

type Composition  {
    mogulId: Int
    id:ID
    field:String
    attachments: [Attachment]
}

type Attachment {
    id: ID
    caption: String
    managedFile: ManagedFile
    embedding: String
}

type Publication {
    mogulId:Int
    id:ID
    plugin:String
    url:String
    created: Float
    published: Float
}

type SettingsPage {
    valid    : Boolean
    category : String
    settings : [Setting]
}

type Mogul {
    id: Int
    name : String
    givenName : String
    familyName : String
    email : String
}


type Query {

    # publications


    canPublish (
        publishableType : String ,
        id :  Int, 
        contextJson : String ,
        plugin : String 
    ) : Boolean


    # compositions
    compositionById ( compositionId:ID) : Composition

    # misc 
    renderMarkdown( markdown : String) : String

    # notifications
    notifications: NotificationEvent

    # settings
    settings: [SettingsPage]

    # mogul
    me: Mogul

    # ai
    aiChat(prompt:String): String

    # podcasts
    podcastById(id:ID): Podcast
    podcasts: [Podcast]
    podcastEpisodeById(id:ID): Episode
    podcastEpisodesByPodcast (podcastId: ID) : [Episode]

    # managedFiles
    managedFileById ( id : ID) : ManagedFile
}

type ManagedFile {
    id: ID
    bucket: String
    folder: String
    filename: String
    contentType: String
    size: Float
    written : Boolean
    visible : Boolean
    url : String
    visibleUrl: String
}

type Episode {
    titleComposition: Composition
    descriptionComposition: Composition

    #
    availablePlugins :[String]
    id : ID
    title: String
    description: String
    valid: Boolean
    graphic: ManagedFile
    complete: Boolean
    created: Float
    segments : [Segment]
    publications : [Publication]
}

type Segment {
    id : ID
    name : String
    transcript : String
    transcribable : Boolean
    audio: ManagedFile
    producedAudio : ManagedFile
    order : Int
    crossFadeDuration : Int
}

type Podcast {
    id: ID
    title: String
    episodes : [Episode]
    created: Float
}

type NotificationEvent {
    mogulId: ID
    category: String
    key: String
    when :  Float
    context : String
    modal : Boolean ,
    visible : Boolean
}

type Mutation {
    
    publish (
        publishableType : String ,
        id :  Int,
        contextJson : String ,
        plugin : String
    ) : Boolean




    createCompositionAttachment( compositionId:ID ) : Attachment
    deleteCompositionAttachment( attachmentId:ID ) : ID
    setPodcastEpisodesSegmentTranscript(episodeSegmentId: ID, transcribable: Boolean, transcript: String) :Boolean
    refreshPodcastEpisodesSegmentTranscript(episodeSegmentId: ID ) :Boolean
    setManagedFileVisibility( managedFileId: ID,  visible: Boolean) : Boolean
    unpublishPodcastEpisodePublication ( publicationId: ID) : Boolean
    publishPodcastEpisode(episodeId:ID, pluginName: String): Boolean
    updatePodcastEpisode(episodeId: ID, title: String, description: String): Episode
    createPodcast(title:String): Podcast
    createPodcastEpisodeDraft(podcastId: ID, title: String, description:String): Episode
    deletePodcast(id:ID): ID
    updatePodcast( podcastId:ID, title:String ): Podcast
    deletePodcastEpisode(id:ID): ID
    deletePodcastEpisodeSegment(id:ID): ID
    addPodcastEpisodeSegment(episodeId: ID): Boolean
    movePodcastEpisodeSegmentUp(episodeId: ID  , episodeSegmentId: ID ): Boolean
    movePodcastEpisodeSegmentDown(episodeId: ID  , episodeSegmentId: ID ): Boolean
    updateSetting(category:String, name:String, value:String): Boolean
}